name: Build and publish sNGINX image

on:
  schedule:
    - cron: "0 8 * * *"
  push:
    branches: [ main ]
    paths:
      - 'docker/Dockerfile'
      - '.github/workflows/build.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Convert to lowercase
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_FULLNAME: "${{ github.repository }}"
        run: |
          echo "IMAGE_OWNER=${REPO_OWNER,,}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${REPO_NAME,,}" >> ${GITHUB_ENV}
          echo "IMAGE_FULLNAME=${REPO_FULLNAME,,}" >> ${GITHUB_ENV}

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install --no-install-recommends --no-install-suggests -y ca-certificates curl jq

      - name: Get latest version of Nginx
        run: bash scripts/get-ngx-ver.sh

      - name: Check if Nginx version already exists in GHCR
        id: check_version
        env:
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.NGINX_VERSION }}
        run: |
          set -euo pipefail

          API_URL="https://api.github.com/users/${IMAGE_OWNER}/packages/container/${IMAGE_NAME}/versions?per_page=100"
          AUTH_HEADER="Authorization: Bearer ${GHCR_TOKEN}"

          echo "Querying ${API_URL} for existing tags..."
          RESP=$(curl -s -w "\n%{http_code}" -H "${AUTH_HEADER}" -H "Accept: application/vnd.github+json" "${API_URL}")
          STATUS_CODE=$(echo "$RESP" | tail -n1)
          BODY=$(echo "$RESP" | sed '$d')

          echo "GHCR API response status code: ${STATUS_CODE}"

          case $STATUS_CODE in
            200)
              ;;
            403)
              echo "❌ GITHUB_TOKEN lacks read permission of packages."
              exit 1
              ;;
            404)
              echo "🚀 No packages found. Proceeding with build."
              echo "SKIP_BUILD=false" >> ${GITHUB_ENV}
              ;;
            *)
              echo "❌ Unexpected status code: ${STATUS_CODE}"
              exit 1
              ;;
          esac

          FOUND=$(echo "${BODY}" | jq -r '.[] | .metadata.container.tags[]?' | grep -Fx "${TAG}" || true)

          if [ -n "${FOUND}" ]; then
            echo "✅ Image tag ${TAG} already exists. Skipping build and push."
            echo "SKIP_BUILD=true" >> ${GITHUB_ENV}
          elif [ "${STATUS_CODE}"="200" ]; then
            echo "🚀 Image tag ${TAG} not found. Proceeding with build."
            echo "SKIP_BUILD=false" >> ${GITHUB_ENV}
          fi

      - name: Add summary if build skipped
        if: env.SKIP_BUILD == 'true'
        run: |
          echo "### 🟡 Build Skipped" >> ${GITHUB_STEP_SUMMARY}
          echo "The image tag **${{ env.NGINX_VERSION }}** already exists in GHCR." >> ${GITHUB_STEP_SUMMARY}
          echo "No new build or push was performed." >> ${GITHUB_STEP_SUMMARY}

      - name: Get latest versions of dependencies
        if: env.SKIP_BUILD == 'false'
        run: bash scripts/get-dep-ver.sh

      - name: Set up QEMU
        if: env.SKIP_BUILD == 'false'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: env.SKIP_BUILD == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: env.SKIP_BUILD == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch Docker image
        if: env.SKIP_BUILD == 'false'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ env.IMAGE_FULLNAME }}:${{ env.NGINX_VERSION }}
            ghcr.io/${{ env.IMAGE_FULLNAME }}:latest
          build-args: |
            LIBXML2_VERSION=${{ env.LIBXML2_VERSION }}
            LIBXSLT_VERSION=${{ env.LIBXSLT_VERSION }}
            LIBGD_VERSION=${{ env.LIBGD_VERSION }}
            OPENSSL_VERSION=${{ env.OPENSSL_VERSION }}
            ZLIB_VERSION=${{ env.ZLIB_VERSION }}
            PCRE2_VERSION=${{ env.PCRE2_VERSION }}
            NGINX_VERSION=${{ env.NGINX_VERSION }}
          no-cache: false
          provenance: false
